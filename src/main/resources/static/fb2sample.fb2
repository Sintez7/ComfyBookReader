<?xml version="1.0" encoding="UTF-8"?>
<FictionBook xmlns="http://www.gribuser.ru/xml/fictionbook/2.0" xmlns:l="http://www.w3.org/1999/xlink">
    <description>
        <title-info>
            <genre>antique</genre>
            <author>
                <first-name>Пользователь</first-name>
                <last-name>Windows</last-name>
            </author>
            <book-title>Spring in Action Covers Spring 5-1--11</book-title>
            <coverpage>
                <image l:href="#img_0"/>
            </coverpage>
            <lang>ru</lang>
        </title-info>
        <document-info>
            <author>
                <first-name>Пользователь</first-name>
                <last-name>Windows</last-name>
            </author>
            <program-used>calibre 5.25.0</program-used>
            <date>23.8.2021</date>
            <id>55aad8c8-8a42-4dbd-975b-1df0d9554ad3</id>
            <version>1.0</version>
        </document-info>
        <publish-info>
            <year>0101</year>
        </publish-info>
    </description>
    <body>
        <section>
            <p>
                <a l:href="https://beginner-mercenary.blogspot.com/2019/04/spring-in-action-covers-spring-50-1.html">
                    Spring in Action Covers Spring 5.0 перевод на русский. Глава 1
                </a>
            </p>
            <p>
                <strong>Начало работы со Spring</strong>
            </p>
            <p>Хотя греческий философ Гераклит не был хорошо известен как разработчик программного обеспечения, он,
                казалось, хорошо разбирался в этом вопросе. Его цитируют так: "единственное неизменное-это перемены.”
                Это заявление отражает основополагающую истину разработки программного обеспечения.
            </p>
            <p>То, как мы разрабатываем приложения сегодня, отличается от того, что было год назад, 5 лет назад, 10 лет
                назад, и, конечно, 15 лет назад, когда первоначальная структура Spring Framework была представлена в
                книге рода Джонсона, Expert One-on-One J2EE Design and Development (Wrox, 2002, http://mng.bz/oVjy).
            </p>
            <p>Тогда наиболее распространенными типами разработанных приложений были браузерные веб-приложения,
                поддерживаемые реляционными базами данных. Хотя этот тип разработки по-прежнему актуален, и Spring
                хорошо подходит для таких приложений, мы также заинтересованы в разработке приложений, состоящих из
                микросервисов, предназначенных для облака, которые сохраняют данные в различных базах данных. И новый
                интерес к реактивному программированию направлен на обеспечение большей масштабируемости и повышение
                производительности с неблокирующими операциями.
            </p>
            <p>По мере развития разработки программного обеспечения структура Spring также претерпевала изменения,
                направленные на решение современных задач в области разработки, включая микрослужбы и реактивное
                программирование. Spring также намеревался упростить свою собственную модель разработки, введя Spring
                Boot.
            </p>
            <p>Независимо от того, разрабатываете ли вы простое веб-приложение с поддержкой баз данных или создаете
                современное приложение, основанное на микросервисах, Spring-это платформа, которая поможет вам достичь
                ваших целей. Эта глава - ваш первый шаг в путешествии по современной разработке приложений с Spring.
            </p>
            <p>
                <strong>1.1 Что такое Spring?</strong>
            </p>
            <p>Я знаю, что вам, вероятно, не терпится начать писать приложение Spring, и я уверяю вас, что до конца этой
                главы вы разработаете простое приложение. Но сначала, позвольте мне подготовить почву с несколькими
                основными понятиями Spring, которые помогут вам понять, что делает Spring.
            </p>
            <p>Любое нетривиальное приложение состоит из множества компонентов, каждый из которых отвечает за свою часть
                общей функциональности приложения, координируя работу с другими элементами приложения. При запуске
                приложения эти компоненты каким-то образом должны быть созданы и представлены друг другу.
            </p>
            <p>По своей сути Spring предлагает<emphasis>контейнер</emphasis>, часто называемый контекстом приложения
                Spring (Spring application context), который создает компоненты приложения и управляет ими. Эти
                компоненты, или<emphasis>beans,</emphasis>тесно связанные друг с другом внутри Spring application
                context, как кирпичи, ступени, трубопровод, проводка все вместе составляя дом.
            </p>
            <empty-line/>
            <p>Способ соединения bean-ов вместе основан на шаблоне, известном как dependency injection (DI). Вместо
                того, чтобы компоненты создавали и поддерживали жизненный цикл других компонентов, от которых они
                зависят, приложение с зависимостями полагается на отдельную сущность (контейнер) для создания и
                обслуживания всех компонентов и внедрения их в компоненты, которые в них нуждаются. Обычно это делается
                с помощью аргументов конструктора или методов доступа к свойствам.
            </p>
            <empty-line/>
            <p>Например, предположим, что среди множества компонентов приложения есть два, к которым вы будете
                обращаться: служба запасов (для получения уровней запасов) и Служба продуктов (для предоставления
                базовой информации о продукте). Служба продуктов зависит от службы запасов, чтобы иметь возможность
                предоставить полный набор сведений о продуктах. На рисунке 1.1 показаны связи между этими компонентами и
                контекстом приложения Spring.
            </p>
            <p>
                <image l:href="#img_1"/>
            </p>
            <p>Помимо основного контейнера, Spring и полный портфель связанных библиотек предлагают веб-платформу,
                различные варианты сохранения данных, инфраструктуру безопасности, интеграцию с другими системами,
                мониторинг времени выполнения, поддержку микрослужб, модель реактивного программирования и многие другие
                функции, необходимые для современной разработки приложений.
            </p>
            <empty-line/>
            <p>Исторически сложилось так, что контекст приложения Spring для связывания компонентов был связан с одним
                или несколькими XML-файлами, описывающими компоненты и их связь с другими компонентами. Например,
                следующий XML-код объявляет два bean-а InventoryService bean и ProductService bean, и
                привязку<emphasis>InventoryService</emphasis>bean в <emphasis>ProductService</emphasis>через
                аргументы конструктора:
            </p>
            <p>&lt;bean id="inventoryService"class="com.example.InventoryService" /&gt;</p>
            <empty-line/>
            <p>&lt;bean id="productService"class="com.example.ProductService" /&gt;</p>
            <empty-line/>
            <p>      &lt;constructor-arg ref="inventoryService" /&gt;</p>
            <empty-line/>
            <p>&lt;/bean&gt;</p>
            <empty-line/>
            <empty-line/>
            <p>Однако в последних версиях Spring чаще используется конфигурация на основе Java. Следующий класс
                конфигурации на основе Java эквивалентен конфигурации XML:
            </p>
            <empty-line/>
            <empty-line/>
            <p>@Configuration</p>
            <empty-line/>
            <p>public class ServiceConfiguration {</p>
            <empty-line/>
            <p> @Bean</p>
            <empty-line/>
            <p> public InventoryService inventoryService() {</p>
            <empty-line/>
            <p>   return new InventoryService();</p>
            <empty-line/>
            <p> }</p>
            <empty-line/>
            <empty-line/>
            <p> @Bean</p>
            <empty-line/>
            <p> public ProductService productService() {</p>
            <empty-line/>
            <p>   return new ProductService(inventoryService());</p>
            <empty-line/>
            <p> }</p>
            <empty-line/>
            <empty-line/>
            <p>}</p>
            <empty-line/>
            <p></p>
            <p>Аннотация<emphasis>@Configuration</emphasis>указывает Spring, что это класс конфигурации, который будет
                предоставлять bean-ы контексту приложения Spring. Методы класса конфигурации аннотируются<emphasis>
                    @Bean</emphasis>, указывая, что объекты, которые они возвращают, должны быть добавлены как bean в
                контексте приложения (по умолчанию, их bean идентификаторы будут соответствовать именам методов, которые
                определяют их).
            </p>
            <empty-line/>
            <p>Конфигурация Java-based предлагает несколько преимуществ по сравнению с xml-конфигурацией, включая
                повышение безопасности и улучшение refactorability. Но даже при всем при этом явная настройка с помощью
                Java или XML необходима только в том случае, если Spring не может автоматически настроить компоненты.
            </p>
            <empty-line/>
            <p>Автоматическая конфигурация имеет свои корни в методах Spring известных как<emphasis>
                autowiring</emphasis>и<emphasis>component scanning</emphasis>. С помощью component scanning Spring
                может автоматически обнаруживать компоненты из classpath приложения и создавать их как bean-ы в
                контексте приложения Spring. С autowiring Spring автоматически объединяет компоненты с другими
                компонентами, от которых они зависят.
            </p>
            <empty-line/>
            <p>Совсем недавно, с введением Spring Boot, автоматическая настройка вышла далеко за рамки сканирования
                компонентов и<emphasis>autowiring</emphasis>. Spring Boot-это расширение Spring Framework, которое
                предлагает несколько улучшений производительности. Наиболее известным из этих усовершенствований
                является автоконфигурация, где Spring Boot может сделать разумные предположения о том, какие компоненты
                должны быть настроены и подключены друг к другу, на основе записей в classpath, переменных среды и
                других факторов.
            </p>
            <empty-line/>
            <p>Я хотел бы показать вам пример кода, демонстрирующего автоконфигурацию. Но я не могу. Видите ли,
                автоконфигурация очень похожа на ветер. Вы можете видеть последствия этого, но нет никакого кода,
                который я могу показать вам и сказать: "Смотрите! Вот пример автоконфигурации!” Такое случается,
                компоненты и функциональность без написания кода. Именно этот отсутствие кода имеет важное значение для
                автоконфигурации и делает ее такой замечательной.
            </p>
            <empty-line/>
            <p>Автоконфигурация Spring Boot значительно сократила объем явной конфигурации (будь то XML или Java),
                необходимой для построения приложения. Фактически, к тому времени, когда вы закончите пример в этой
                главе, у вас будет работающее приложение Spring, которое имеет только одну строку кода конфигурации
                Spring!
            </p>
            <empty-line/>
            <p>Spring Boot настолько улучшает Spring-разработку, что без него сложно представить разработку
                Spring-приложений. По этой причине в этой книге Spring и Spring Boot рассматриваются как одно и то же.
                Мы будем использовать Spring Boot, насколько это возможно, и явную конфигурацию только при
                необходимости. И, поскольку Spring XML configuration-это олдскульный способ работы с Spring, мы
                сосредоточимся в первую очередь на Java-конфигурации Spring.
            </p>
            <empty-line/>
            <p>Но хватит болтать, yakety-yak, и флудить. Название этой книги включает в себя фразу в действии, так что
                давайте двигаться, и вы можете начать писать свое первое приложение с Spring.
            </p>
            <p>
                <strong>1.2Инициализация приложения Spring</strong>
            </p>
            <p>Благодаря ходу этой книги вы создадите Taco Cloud, онлайн-приложение для заказа самой замечательной еды,
                созданной человеком-такосом. Конечно, для достижения этой цели вы будете использовать Spring, Spring
                Boot и множество связанных библиотек и платформ.
            </p>
            <empty-line/>
            <p>Вы найдете несколько вариантов инициализации приложения Spring. Хотя я мог бы провести вас через шаги
                ручного создания структуры каталогов проекта и определения спецификации сборки, это потерянное
                время—время, которое лучше потратить на написание кода приложения. Таким образом вы собираетесь
                опереться на Spring Initializr для начальной загрузки приложения.
            </p>
            <empty-line/>
            <p>Spring Initializr-это веб-приложение на основе браузера и REST API, которое может создавать структуру
                проекта skeleton Spring, которую вы можете реализовать с любой функциональностью, которую вы хотите.
                Несколько способов использования Spring Initializr:
            </p>
            <p>Из веб-приложения на http://start.spring.io</p>
            <p>Из командной строки с помощью команды curl</p>
            <p>Из командной строки с помощью интерфейса командной строки Spring Boot</p>
            <p>При создании нового проекта с Spring Tool Suite</p>
            <p>При создании нового проекта с IntelliJ IDEA</p>
            <p>При создании нового проекта в NetBeans</p>
            <p>Вместо того, чтобы тратить несколько страниц этой главы, рассказывая о каждом из этих вариантов, я собрал
                эти детали в приложении. В этой главе и на протяжении всей этой книги я покажу вам, как создать новый
                проект, используя мой любимый вариант: поддержка Spring Initializr в Spring Tool Suite.
            </p>
            <empty-line/>
            <p>Как следует из названия, Spring Tool Suite-это фантастическая среда разработки Spring. Но он также
                предлагает удобную функцию Spring Boot Dashboard, которая (по крайней мере, на момент написания этой
                статьи) недоступна ни в одном из других вариантов IDE.
            </p>
            <empty-line/>
            <section/>
    <body/>
</FictionBook>